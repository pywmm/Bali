const path = require('path');
const webpack = require('webpack');
// const MFS = require('memory-fs');
const fs = require('fs');
const express = require('express');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const clientConfig = require('./webpack.dev.conf.js');    // eslint-disable-line global-require
const serverConfig = require('./webpack.server.conf.js'); // eslint-disable-line global-require

module.exports = function setupDevServer(name, cb) {
  let bundle;
  let clientManifest;
  let resolve;
  const readyPromise = new Promise((r) => { resolve = r; });
  const ready = (...args) => {
    resolve();
    cb(...args);
  };

  const app = express();
  const compiler = webpack(clientConfig);

  const devMiddleware = webpackDevMiddleware(compiler, {
    publicPath: clientConfig.output.publicPath,
    quiet: false,
  });

  const hotMiddleware = webpackHotMiddleware(compiler, {
    log: () => {},
  });

  // force page reload when html-webpack-plugin template changes
  compiler.plugin('compilation', (compilation) => {
    compilation.plugin('html-webpack-plugin-after-emit', (data, callback) => {
      // hotMiddleware.publish({ action: 'reload' });
      hotMiddleware.publish();
      callback();
    });
  });

  // handle fallback for HTML5 history API
  app.use(require('connect-history-api-fallback')()); // eslint-disable-line global-require

  // serve webpack bundle output
  app.use(devMiddleware);

  // enable hot-reload and state-preserving
  // compilation error display
  app.use(hotMiddleware);

  compiler.plugin('done', () => {
    // const fs = devMiddleware.fileSystem;
    const readFile = file => fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
    clientManifest = JSON.parse(readFile('vue-ssr-client-manifest.json'));
    if (bundle) {
      ready(bundle, {
        clientManifest,
      });
    }
  });


  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  // const mfs = new MFS();
  // serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    stats = stats.toJson(); // eslint-disable-line no-param-reassign
    stats.errors.forEach(error => console.error(error)); // eslint-disable-line no-console
    stats.warnings.forEach(error => console.warn(error)); // eslint-disable-line no-console

    // read bundle generated by vue-ssr-webpack-plugin
    const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-server-bundle.json');
    bundle = JSON.parse(fs.readFileSync(bundlePath, 'utf-8'));
    if (clientManifest) {
      ready(bundle, {
        clientManifest,
      });
    }
  });

  return readyPromise;
};
